#!/usr/bin/env python3

import json
import random
import sys

# asciicast-v1
#log = json.load(sys.stdin)

# asciicast-v2
log = { 'header': json.loads(sys.stdin.readline()), 'stdout': [] }
t = 0
for ln in sys.stdin.readlines():
	(ts, d, v) = json.loads(ln)
	assert d == 'o'
	log['stdout'].append([ts - t, v])
	t = ts

def long_delay_booster(t, v):
	'''Limit all intra-update delays to be now more than 1.5s
	'''
	return ( 1.5 if t > 1.5 else t, v )

def download_booster(t, v):
	'''Apply a 4x speed up if we thing we are showing some kind of
	download indicator.

	The heuristic is very simple and is based on the use of carriage
	return to update the status.
	'''
	return ( t/4 if v.startswith('\r') and '%' in v else t, v )

def typing_booster(t, v):
	'''Apply a 4x speed up to typing speed.

	Triggers if the update consists of a single character (or a special
	backspace combination).
	'''
	return ( t/4 if len(v) == 1 or v == '\b \b' else t, v )

def uart_booster(t, v, baud=115200):
	'''Eliminate delays due to UART "render time".

	First calculate (roughly) how long it would take to deliver the
	message via the UART and then remove this from the time delta
	(without letting it become negative).
	'''
	t -= len(v) * (10 / baud)
	return ( t if t > 0 else 0, v )

def everything_booster(t, v):
	t, v = uart_booster(t, v)
	t, v = long_delay_booster(t, v)
	t, v = download_booster(t, v)
	t, v = typing_booster(t, v)

	return ( t, v )

def artificial_typing(log):
	'''Make copy 'n pasted strings look like they were typed

	Happily don't need heuristics for this, we can just capture the
	echoed escape codes to identify copy 'n pasted text. Yay!
	'''
	newlog = []
	for t, v in log:
		# Spot the escape sequences!
		if v.startswith('\u001b[3m') and v.endswith('\u001b[23m'):
			newlog.append([t, v[4]])
			for c in v[5:-5]:
				if c == ' ':
					# Make it look like the typist treats words atomically
					# and often has a longer pause between words than
					# between characters.
					newlog.append([random.uniform(0.0, 0.20), c])
				else:
					newlog.append([random.uniform(0.00, 0.08), c])
		else:
			newlog.append([t, v])
	return newlog

log['stdout'] = [ everything_booster(t, v) for t, v in log['stdout'] ]
log['stdout'] = artificial_typing(log['stdout'])

# asciicast-v1
#json.dump(log, sys.stdout, indent=2)

# asciicast-v2
print(json.dumps(log['header']))
t = 0
for (ts, v) in log['stdout']:
	print(json.dumps([t+ts, 'o', v]))
	t += ts
