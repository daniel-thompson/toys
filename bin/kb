#!/usr/bin/env python3

#
# kb - Execute actions looked up from a markdown knowledge base.
#
# Copyright (C) 2015-2017 Daniel Thompson <daniel@redfelineninja.org.uk>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#

import os, re, subprocess, tempfile, sys

KB = os.environ['HOME'] + '/Documents/Wiki'

MD_H_RE = '^ {0,3}(#+)(?P<heading>[^#]+)#*$'
MD_CODE_BLOCK_RE = '^ {0,3}[`~][`~][`~] *(?P<language>[^` ]*) *(?P<comment>[^`]*)$'

class KBError(Exception):
	pass

class KnowledgeBase:
	def __init__(self, k):
		candidates = []

		# For case (and space) insensitive comparisons
		normalize = lambda s: s.replace('-', ' ').replace('_', ' ').lower()

		# Generate a comprehensive list of possible candidates,
		# we will reduce this down to a short list in a moment.
		for f in os.listdir(KB):
			if normalize(k) in normalize(f):
				candidates.append(f)

		# Disregard hidden files and obvious editor backup files
		candidates = [ c for c in candidates if not c.startswith('.') ]
		candidates = [ c for c in candidates if not c.endswith('~') ]

		# First match is a case insensitive match on whole filename (before the .) ...
		shortlist = [ c for c in candidates if
				normalize(c).startswith(normalize(k)+'.') ]
		# ... then on case sensitive prefix ...
		if not shortlist:
			shortlist = [ c for c in candidates if c.startswith(k) ]
		# ... then on case insensitive prefix ...
		if not shortlist:
			shortlist = [ c for c in candidates if
					normalize(c).startswith(normalize(k)) ]
		# ... then on case insensitive substring match
		if not shortlist:
			shortlist = candidates

		# Give up if we cannot identify a unique finalist
		if len(shortlist) == 0:
			raise KBError('No knowledge found for {}'.format(k))
		elif len(shortlist) > 1:
			msg = 'Too much knowledge found for {}'.format(k)
			raise KBError('\n  '.join([msg] + shortlist))

		self.kb = shortlist[0]
		self.key = k

	def open(self):
		return open(KB + os.sep + self.kb, 'r')

	def do_edit(self, argv):
		return subprocess.call(['edit'] + argv + [KB+os.sep+self.kb])

	def do_help(self):
		f = self.open()

		heading = ''
		actions = []
		in_code_block = False

		for ln in f.readlines():
			ln = ln.rstrip()

			m = re.match(MD_H_RE, ln)
			if m and not in_code_block:
				heading = m.group('heading').strip()

			m = re.match(MD_CODE_BLOCK_RE, ln)
			if m:
				in_code_block = not in_code_block
				if m.group('language') == 'sh':
					actions.append((m.group('comment'), heading))
		f.close()

		print('''\
USAGE: kb ACTION {} [ARGS...]
Run an action from the knowledge base.

Built-in actions:
'''.format(self.key))
		for b in sorted(builtin):
			print('  {:<18}{}'.format(b, builtin[b][1]))

		if len(actions) == 0:
			print('\nNo {} (from {}) specific actions are available'.format(
					self.key, self.kb))
		else:
			print('\nActions specific to {} (from {}):\n'.format(
					self.key, self.kb))
			for a in actions:
				print('  {:<18} {}'.format(a[0], a[1]))
		print('')

	def do_html(self):
		subprocess.call(['cmark'] + [KB+os.sep+self.kb])

	def do_show(self):
		f = self.open()
		for ln in f.readlines():
			ln = ln.rstrip()
			print(ln)
		f.close()
	
	def do_run(self, action, argv, no_execute=False):
		activated = False
		cmds = []

		with self.open() as f:
			lines = f.readlines()
		for ln in lines:
			ln = ln.rstrip()

			m = re.match(MD_CODE_BLOCK_RE, ln)

			if not activated and m:
				if m.group('language') == 'sh' and m.group('comment') == action:
					activated = True
				continue

			if activated and m:
				break

			if activated:
				cmds.append(ln)

		if len(cmds) == 0:
			raise KBError("{} has no {} action. Try 'kb {} help'.".format(self.kb, action, self.key))

		if no_execute:
			print('\n'.join(cmds))
			return

		with tempfile.NamedTemporaryFile(prefix='tmp_kb_', suffix='.sh') as f:
			f.writelines([bytes(c+'\n', 'ascii') for c in cmds])
			f.flush()
			retval = subprocess.call( [os.environ['SHELL'], '-ex', f.name] + argv)

		return retval

def do_dryrun(argv):
	if len(argv) < 2:
		raise KBError("Missing arguments. Try 'kb {} help'.".format(argv[0]))
	return KnowledgeBase(argv[0]).do_run(argv[1], argv[2:], no_execute=True)

def do_edit(argv):
	try:
		return KnowledgeBase(argv[0]).do_edit(argv[1:])
	except KBError as e:
		if not str(e).startswith('No knowledge found'):
			raise
	try:
		extension = KnowledgeBase('index').kb[5:]
	except:
		# Assume markdown if there is no index
		extension = '.md'
	return subprocess.call(['edit'] + [KB+os.sep+argv[0]+extension])


def do_grep(argv):
	os.chdir(KB)
	return subprocess.call(['git', 'grep'] + argv)

def do_help(argv=()):
	if len(argv) == 0:
		print('''\
USAGE: kb ACTION [KEY] [ARGS...]
Run an action on the knowledge base. Most actions act on a single
article of knowledge. These actions use KEY to lookup the appropriate
entry from the knowledge base.

Built-in actions:
''')
		for b in sorted(builtin):
			print('  {:<18}{}'.format(b, builtin[b][1]))
		print('''
Examples:

  kb boot hikey     Run the boot action from the hikey knowledge base entry.
                    This is a shorthand for to 'kb run hikey boot'
  kb grep -l needle Show all knowledge base entries matching needle
  kb help hikey     Show all custom actions for hikey
''')
	else:
		KnowledgeBase(argv[0]).do_help()

def do_html(argv):
	return KnowledgeBase(argv[0]).do_html()

def do_show(argv):
	return KnowledgeBase(argv[0]).do_show()

def do_run(argv):
	if len(argv) < 2:
		raise KBError("Missing arguments. Try 'kb {} help'.".format(argv[0]))
	return KnowledgeBase(argv[0]).do_run(argv[1], argv[2:])

builtin = {
	'dryrun': (do_dryrun,
		"Show that commands that would be expected by 'run'"),
	'edit': (do_edit,
		'Edit a knowledge base entry'),
	'grep': (do_grep,
		'Search the knowledge base'),
	'help': (do_help,
		'Show this help text and, if ARGS, list available actions'),
	'html': (do_html,
		'Convert the knowledge base entry to HTML'),
	'show': (do_show,
		'Show a knowledge base entry'),
	'run': (do_run,
		'Run an action from the knowledge base')
}
	
def main(argv):
	if len(argv) < 2:
		raise KBError("No arguments. Try 'kb help'.")
	
	if argv[1] in builtin.keys():
		return builtin[argv[1]][0](argv[2:])
	else:
		if len(argv) < 3:
			if len(argv) == 2:
				# Let's see if we can lookup the command in misc
				try:
					return do_run(['misc', argv[1]])
				except KBError:
					# Final chance! Try using the current
					# directory name to generate a command.
					try:
						fragments = os.getcwd().split('-')
						return do_run([fragments[-1], argv[1]])
					except (ValueError, KBError) as e:
						pass
			raise KBError("Missing arguments. Try 'kb help'.")

		try:
			return do_run([argv[2], argv[1]] + argv[3:])
		except KBError:
			# Let's see if we can lookup the command in the misc
			# topic. It is a bit hacky to rely on exceptions for
			# this but this is quicker than rewriting the way error
			# reporting happens...
			try:
				return do_run(['misc'] + argv[1:])
			except KBError as e:
				# We'll ignore this exception and re-raise the
				# original (i.e. the error message we show to
				# the user will not be based on us trying to
				# fixup their input)
				pass
			raise


try:
	sys.exit(main(sys.argv))
except KBError as e:
	print(e)
except KeyboardInterrupt:
	sys.exit(1)
sys.exit(127)
